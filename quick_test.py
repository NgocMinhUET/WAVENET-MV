#!/usr/bin/env python3
"""
Quick Test Script - Ch·∫°y tr√™n Windows tr∆∞·ªõc khi push code
Ki·ªÉm tra syntax, import, v√† basic functionality
"""

import sys
import torch
import importlib.util
from pathlib import Path

def test_imports():
    """Test t·∫•t c·∫£ imports trong project"""
    print("üîç Testing imports...")
    
    try:
        # Test models
        from models.wavelet_transform_cnn import WaveletTransformCNN
        from models.adamixnet import AdaMixNet
        from models.compressor_vnvc import CompressorVNVC
        from models.ai_heads import YOLOTinyHead, SegFormerHead
        print("‚úÖ Models import OK")
        
        # Test training scripts syntax
        spec = importlib.util.spec_from_file_location("stage1", "training/stage1_train_wavelet.py")
        print("‚úÖ Training scripts syntax OK")
        
        # Test evaluation
        from evaluation.codec_metrics import calculate_psnr, calculate_ssim
        print("‚úÖ Evaluation imports OK")
        
        return True
    except Exception as e:
        print(f"‚ùå Import error: {e}")
        return False

def test_basic_functionality():
    """Test basic model functionality v·ªõi dummy data"""
    print("üîç Testing basic functionality...")
    
    try:
        # Test v·ªõi dummy data
        dummy_input = torch.randn(1, 3, 64, 64)  # Small size for quick test
        
        # Test WaveletCNN
        from models.wavelet_transform_cnn import WaveletTransformCNN
        wavelet_cnn = WaveletTransformCNN(in_channels=3, out_channels=64)
        wavelet_out = wavelet_cnn(dummy_input)
        print(f"‚úÖ WaveletCNN output shape: {wavelet_out.shape}")
        
        # Test AdaMixNet
        from models.adamixnet import AdaMixNet
        adamix = AdaMixNet(in_channels=wavelet_out.shape[1], out_channels=128)
        adamix_out = adamix(wavelet_out)
        print(f"‚úÖ AdaMixNet output shape: {adamix_out.shape}")
        
        return True
    except Exception as e:
        print(f"‚ùå Functionality error: {e}")
        return False

def test_code_quality():
    """Check code quality"""
    print("üîç Testing code quality...")
    
    try:
        import subprocess
        
        # Check syntax v·ªõi flake8 (n·∫øu c√≥)
        try:
            result = subprocess.run(['flake8', '--select=E9,F63,F7,F82', '.'], 
                                  capture_output=True, text=True)
            if result.returncode == 0:
                print("‚úÖ Code syntax OK")
            else:
                print(f"‚ö†Ô∏è Code quality issues: {result.stdout}")
        except FileNotFoundError:
            print("‚ö†Ô∏è flake8 not installed, skipping syntax check")
        
        return True
    except Exception as e:
        print(f"‚ùå Code quality check error: {e}")
        return False

def main():
    """Run all tests"""
    print("üöÄ Running Quick Test Before Git Push...")
    print("=" * 50)
    
    tests = [
        ("Import Test", test_imports),
        ("Functionality Test", test_basic_functionality),
        ("Code Quality Test", test_code_quality)
    ]
    
    results = []
    for test_name, test_func in tests:
        print(f"\nüìã {test_name}")
        print("-" * 30)
        result = test_func()
        results.append((test_name, result))
    
    print("\n" + "=" * 50)
    print("üìä SUMMARY:")
    all_passed = True
    for test_name, result in results:
        status = "‚úÖ PASS" if result else "‚ùå FAIL"
        print(f"{test_name}: {status}")
        if not result:
            all_passed = False
    
    if all_passed:
        print("\nüéâ ALL TESTS PASSED! Ready to push to git.")
        return 0
    else:
        print("\n‚ö†Ô∏è Some tests failed. Please fix before pushing.")
        return 1

if __name__ == "__main__":
    sys.exit(main()) 