#!/bin/bash

# =============================================================================
# WAVENET-MV COMPREHENSIVE EVALUATION SCRIPT FOR SERVER
# =============================================================================
# Script n√†y ch·∫°y ƒë√°nh gi√° ƒë·∫ßy ƒë·ªß cho c√°c m√¥ h√¨nh ƒë√£ ƒë∆∞·ª£c train
# Gi·∫£ ƒë·ªãnh r·∫±ng c√°c checkpoints ƒë√£ t·ªìn t·∫°i
# =============================================================================

# Thi·∫øt l·∫≠p m√¥i tr∆∞·ªùng
echo -e "\nüîß SETTING UP ENVIRONMENT"
echo "----------------------------------------"

# Ki·ªÉm tra CUDA
nvidia-smi
if [ $? -ne 0 ]; then
    echo "‚ùå CUDA kh√¥ng kh·∫£ d·ª•ng! Vui l√≤ng ki·ªÉm tra c√†i ƒë·∫∑t GPU."
    exit 1
fi

# C√†i ƒë·∫∑t dependencies n·∫øu c·∫ßn
pip install -r requirements.txt

# T·∫°o th∆∞ m·ª•c results n·∫øu ch∆∞a t·ªìn t·∫°i
mkdir -p results

# Ki·ªÉm tra xem c√≥ checkpoints kh√¥ng
if [ ! -d "checkpoints" ] || [ -z "$(ls -A checkpoints/)" ]; then
    echo "‚ùå Kh√¥ng t√¨m th·∫•y checkpoints! Vui l√≤ng ch·∫°y training tr∆∞·ªõc."
    exit 1
fi

# =============================================================================
# EVALUATION: ƒê√°nh gi√° m√¥ h√¨nh v·ªõi nhi·ªÅu lambda values
# =============================================================================
echo -e "\nüîÑ RUNNING COMPREHENSIVE EVALUATION"
echo "----------------------------------------"

# Danh s√°ch lambda values ƒë·ªÉ ƒë√°nh gi√°
lambda_values=(64 128 256 512 1024 2048)

for lambda in "${lambda_values[@]}"; do
    # Ki·ªÉm tra xem checkpoint c√≥ t·ªìn t·∫°i kh√¥ng
    if [ ! -f "checkpoints/stage2_compressor_coco_lambda${lambda}_best.pth" ]; then
        echo "‚ö†Ô∏è Kh√¥ng t√¨m th·∫•y checkpoint cho lambda = $lambda, b·ªè qua..."
        continue
    fi
    
    echo -e "\nüîÑ Evaluating model v·ªõi lambda = $lambda"
    
    # ƒê√°nh gi√° codec metrics (PSNR, MS-SSIM, BPP)
    python evaluation/codec_metrics_final.py \
        --stage1_checkpoint checkpoints/stage1_wavelet_coco_best.pth \
        --stage2_checkpoint checkpoints/stage2_compressor_coco_lambda${lambda}_best.pth \
        --dataset coco \
        --data_dir datasets/COCO \
        --split val \
        --max_samples 100 \
        --batch_size 4 \
        --output_csv results/wavenet_mv_lambda${lambda}_codec_metrics.csv
    
    if [ $? -ne 0 ]; then
        echo "‚ùå Codec evaluation th·∫•t b·∫°i v·ªõi lambda = $lambda"
        continue
    fi
    
    # ƒê√°nh gi√° AI metrics (Detection, Segmentation accuracy)
    python evaluation/vcm_metrics.py \
        --stage1_checkpoint checkpoints/stage1_wavelet_coco_best.pth \
        --stage2_checkpoint checkpoints/stage2_compressor_coco_lambda${lambda}_best.pth \
        --stage3_checkpoint checkpoints/stage3_ai_heads_coco_best.pth \
        --dataset coco \
        --data_dir datasets/COCO \
        --split val \
        --max_samples 100 \
        --batch_size 4 \
        --enable_detection \
        --enable_segmentation \
        --lambda_rd ${lambda} \
        --output_json results/wavenet_mv_lambda${lambda}_ai_metrics.json
    
    if [ $? -ne 0 ]; then
        echo "‚ùå AI metrics evaluation th·∫•t b·∫°i v·ªõi lambda = $lambda"
        continue
    fi
    
    echo "‚úÖ Evaluation ho√†n th√†nh v·ªõi lambda = $lambda"
done

# =============================================================================
# BASELINE COMPARISON: So s√°nh v·ªõi c√°c baseline
# =============================================================================
echo -e "\nüîÑ RUNNING BASELINE COMPARISON"
echo "----------------------------------------"

# Ch·∫°y so s√°nh v·ªõi c√°c codec ti√™u chu·∫©n (JPEG, WebP, VTM)
python evaluation/compare_baselines.py \
    --dataset coco \
    --data_dir datasets/COCO \
    --split val \
    --max_samples 50 \
    --methods JPEG WebP PNG \
    --qualities 30 50 70 90 \
    --output_csv results/baseline_comparison.csv

if [ $? -ne 0 ]; then
    echo "‚ùå Baseline comparison th·∫•t b·∫°i"
else
    echo "‚úÖ Baseline comparison ho√†n th√†nh th√†nh c√¥ng"
fi

# =============================================================================
# GENERATE COMPREHENSIVE REPORTS: T·∫°o b√°o c√°o t·ªïng h·ª£p
# =============================================================================
echo -e "\nüîÑ GENERATING COMPREHENSIVE REPORTS"
echo "----------------------------------------"

# T·∫°o b√°o c√°o t·ªïng h·ª£p t·ª´ c√°c k·∫øt qu·∫£ ƒë√°nh gi√°
python evaluation/generate_summary_report.py \
    --input_dir results \
    --output_file results/wavenet_mv_comprehensive_results.csv

if [ $? -ne 0 ]; then
    echo "‚ùå Report generation th·∫•t b·∫°i"
    exit 1
fi

# T·∫°o b·∫£ng v√† bi·ªÉu ƒë·ªì so s√°nh
python evaluation/generate_tables.py \
    --results_dir results \
    --output_file tables/wavenet_mv_tables.csv

if [ $? -ne 0 ]; then
    echo "‚ùå Table generation th·∫•t b·∫°i"
    exit 1
fi

echo "‚úÖ Report generation ho√†n th√†nh th√†nh c√¥ng"

# =============================================================================
# ABLATION STUDIES: Ph√¢n t√≠ch ƒë√≥ng g√≥p c·ªßa c√°c th√†nh ph·∫ßn
# =============================================================================
echo -e "\nüîÑ RUNNING ABLATION STUDIES"
echo "----------------------------------------"

# Ph√¢n t√≠ch ƒë√≥ng g√≥p c·ªßa wavelet transform
python evaluation/statistical_analysis.py \
    --input_file results/wavenet_mv_comprehensive_results.csv \
    --output_file results/wavelet_contribution_analysis.csv \
    --analysis_type wavelet

if [ $? -ne 0 ]; then
    echo "‚ùå Wavelet contribution analysis th·∫•t b·∫°i"
else
    echo "‚úÖ Wavelet contribution analysis ho√†n th√†nh th√†nh c√¥ng"
fi

# =============================================================================
# SUMMARY: T√≥m t·∫Øt k·∫øt qu·∫£
# =============================================================================
echo -e "\nüéâ EVALUATION COMPLETED!"
echo "üìä Results saved in results/ directory"
echo "üìà Tables and figures saved in tables/ directory"

# In k·∫øt qu·∫£ m·∫´u
echo -e "\nüìä EVALUATION RESULTS PREVIEW:"
head -n 5 results/wavenet_mv_comprehensive_results.csv

echo -e "\n‚úÖ EVALUATION PIPELINE HO√ÄN TH√ÄNH!" 