"""
S·ª≠a l·ªói c√∫ ph√°p trong compressor_improved.py
L·ªói: SyntaxError: unterminated string literal (detected at line 323)
"""

import os

def fix_syntax_error():
    """S·ª≠a l·ªói c√∫ ph√°p trong compressor_improved.py"""
    print("üîß ƒêANG S·ª¨A L·ªñI C√ö PH√ÅP")
    print("="*50)
    
    file_path = 'models/compressor_improved.py'
    if os.path.exists(file_path):
        with open(file_path, 'r', encoding='utf-8') as f:
            content = f.read()
            
        # T√¨m v·ªã tr√≠ c·ªßa ImprovedMultiLambdaCompressorVNVC
        multi_improved_class = content.find("class ImprovedMultiLambdaCompressorVNVC")
        if multi_improved_class > 0:
            # T√¨m ph∆∞∆°ng th·ª©c to() trong class n√†y
            to_method_start = content.find("def to(self, device)", multi_improved_class)
            if to_method_start > 0:
                # Thay th·∫ø to√†n b·ªô ph∆∞∆°ng th·ª©c to() v·ªõi phi√™n b·∫£n ch√≠nh x√°c
                correct_to_method = """
    def to(self, device):
        super().to(device)
        if hasattr(self, 'compressors'):
            for lambda_key, compressor in self.compressors.items():
                if compressor is not None:
                    compressor.to(device)
        return self
    
"""
                # T√¨m v·ªã tr√≠ k·∫øt th√∫c c·ªßa ph∆∞∆°ng th·ª©c to() hi·ªán t·∫°i
                next_def = content.find("def ", to_method_start + 10)
                if next_def > 0:
                    # C·∫Øt n·ªôi dung tr∆∞·ªõc ph∆∞∆°ng th·ª©c to()
                    content_before = content[:to_method_start]
                    # C·∫Øt n·ªôi dung sau ph∆∞∆°ng th·ª©c to()
                    content_after = content[next_def:]
                    
                    # N·ªëi l·∫°i v·ªõi phi√™n b·∫£n ƒë√∫ng c·ªßa ph∆∞∆°ng th·ª©c to()
                    new_content = content_before + correct_to_method + content_after
                    
                    # L∆∞u file
                    with open(file_path, 'w', encoding='utf-8') as f:
                        f.write(new_content)
                        
                    print("‚úÖ ƒê√£ s·ª≠a ph∆∞∆°ng th·ª©c to() cho ImprovedMultiLambdaCompressorVNVC")
                else:
                    print("‚ùå Kh√¥ng th·ªÉ t√¨m ph∆∞∆°ng th·ª©c ti·∫øp theo sau to()")
            else:
                # N·∫øu kh√¥ng t√¨m th·∫•y ph∆∞∆°ng th·ª©c to(), th√™m m·ªõi
                update_method = content.find("def update(self):", multi_improved_class)
                if update_method > 0:
                    correct_to_method = """
    def to(self, device):
        super().to(device)
        if hasattr(self, 'compressors'):
            for lambda_key, compressor in self.compressors.items():
                if compressor is not None:
                    compressor.to(device)
        return self
    
"""
                    # T√¨m v·ªã tr√≠ ƒë·ªÉ th√™m ph∆∞∆°ng th·ª©c to() v√†o tr∆∞·ªõc update()
                    before_update = content.rfind("}", multi_improved_class, update_method)
                    if before_update > 0:
                        new_content = content[:before_update+1] + correct_to_method + content[before_update+1:]
                        
                        # L∆∞u file
                        with open(file_path, 'w', encoding='utf-8') as f:
                            f.write(new_content)
                            
                        print("‚úÖ ƒê√£ th√™m ph∆∞∆°ng th·ª©c to() cho ImprovedMultiLambdaCompressorVNVC")
                    else:
                        print("‚ùå Kh√¥ng th·ªÉ t√¨m v·ªã tr√≠ ph√π h·ª£p ƒë·ªÉ th√™m ph∆∞∆°ng th·ª©c to()")
                else:
                    print("‚ùå Kh√¥ng th·ªÉ t√¨m ph∆∞∆°ng th·ª©c update(self) ƒë·ªÉ ƒë·ªãnh v·ªã")
        else:
            print("‚ùå Kh√¥ng th·ªÉ t√¨m class ImprovedMultiLambdaCompressorVNVC")
            
        # S·ª≠a l·ªói c√∫ ph√°p kh√°c n·∫øu c√≤n
        content = ""
        with open(file_path, 'r', encoding='utf-8') as f:
            for i, line in enumerate(f, 1):
                # D√≤ng l·ªói c√∫ ph√°p t·∫°i 323 
                if i == 323 and '"' in line and not line.strip().endswith('"'):
                    # Fix unterminated string
                    if line.strip().startswith('"'):
                        fixed_line = line.rstrip() + '"\n'
                        content += fixed_line
                        print(f"‚úÖ ƒê√£ s·ª≠a d√≤ng {i}: {line.strip()} -> {fixed_line.strip()}")
                    else:
                        # N·∫øu chu·ªói ·ªü gi·ªØa d√≤ng
                        parts = line.split('"')
                        if len(parts) % 2 == 0:  # S·ªë l∆∞·ª£ng d·∫•u " l·∫ª -> thi·∫øu ƒë√≥ng
                            fixed_line = line.rstrip() + '"\n'
                            content += fixed_line
                            print(f"‚úÖ ƒê√£ s·ª≠a d√≤ng {i}: {line.strip()} -> {fixed_line.strip()}")
                        else:
                            content += line
                else:
                    content += line
                    
        # L∆∞u l·∫°i file sau khi s·ª≠a
        with open(file_path, 'w', encoding='utf-8') as f:
            f.write(content)
        
        print("\n‚úÖ ƒê√É S·ª¨A XONG L·ªñI C√ö PH√ÅP")
        print("H√£y ch·∫°y l·∫°i ƒë√°nh gi√°")
    else:
        print(f"‚ùå Kh√¥ng t√¨m th·∫•y file {file_path}")

if __name__ == "__main__":
    fix_syntax_error() 